/*ยง
  ===========================================================================
  MoonDeploy
  ===========================================================================
  Copyright (C) 2015-2016 Gianluca Costa
  ===========================================================================
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  ===========================================================================
*/

buildscript {
    repositories {
        maven {
            url "https://dl.bintray.com/giancosta86/Hephaestus"
        }
    }

    dependencies {
        classpath "info.gianlucacosta.moonlicense:moonlicense-gradle:4.0"
    }
}

apply plugin: 'base'
apply plugin: 'info.gianlucacosta.moonlicense'

version = '3.1'

description = 'Lightweight software deployment'


moonLicense {
    license = apache2

    productInfo {
        productName = "MoonDeploy"
        inceptionYear = 2015
        copyrightHolder = "Gianluca Costa"
    }

    includes += [
      /.*\.(go)$/: javaFormat,
      /.*\.(glade)$/: xmlFormat
    ]
}


def goLibs = [
  "github.com/gotk3/gotk3/gtk",
  "github.com/giancosta86/caravel",
  "github.com/giancosta86/LockAPI/lockapi",
  "github.com/op/go-logging",
  "github.com/kardianos/osext"
]


String majorVersion = version.substring(0, version.indexOf('.'))

String currentOS = System.properties['os.name'].toLowerCase()
String osSuffix = currentOS.split(" ")[0]

boolean onWindows = currentOS.contains("windows")
boolean onLinux = currentOS.contains("linux")

String compileOutputDir = "${buildDir}/${osSuffix}"

String programExtension = ""
if (onWindows) {
  programExtension = ".exe"
}

String clientAppPackage = "github.com/giancosta86/moondeploy/moonclient"

String crossMacSuffix = "mac"
String crossCompileMacOutputDir = "${buildDir}/${crossMacSuffix}"

File resourcesDir = project.file("moonclient/resources")

if (onWindows) {
  apply from: 'win32dlls.gradle'
}


task checkGoPath << {
  def goPath = System.getenv('GOPATH')
  if (goPath == null) {
    throw new GradleException("The GOPATH environment variable must be set! See https://golang.org/doc/code.html for further information")
  }

  def expectedAbsoluteProjectDir = new File(
          goPath + "/src/github.com/giancosta86/moondeploy"
  ).getAbsolutePath()


  def absoluteProjectDir = project.projectDir.getAbsolutePath()

  if (absoluteProjectDir != expectedAbsoluteProjectDir) {
    throw new GradleException("The project dir should be: '${expectedAbsoluteProjectDir}' but it is '${absoluteProjectDir}'. Please, move the content of the current project dir to the expected directory")
  }
}

task installGoLibs {
    dependsOn(checkGoPath)
} << {
  goLibs.each{ goLib ->
    println "Installing ${goLib}..."

    exec {
      commandLine "go", "get", "-u", goLib
    }

    exec {
      commandLine "go", "install", goLib
    }
  }
}


task copyResources(type: Copy) {
    dependsOn(checkGoPath, setNotices)

    from resourcesDir
    into compileOutputDir
}


task createVersionSourceFile << {
  def lines = [
    "package moondeploy",
    "",
    "var Version = \"${project.version}\""
  ]

  def versionFile = project.file('version.go')

  versionFile.withWriter('utf-8') { writer ->
    lines.each {line ->
      writer.write(line + "\n")
    }
  }
}


tasks["setNotices"].dependsOn(createVersionSourceFile)

task compileGo {
  dependsOn(copyResources, installGoLibs)
} << {
  if (onWindows) {
    exec {
      commandLine "go", "build", "-o", "${compileOutputDir}/moondeploy${programExtension}", "-ldflags", "-H windowsgui", clientAppPackage
    }
  } else {
    exec {
      commandLine "go", "build", "-o", "${compileOutputDir}/moondeploy${programExtension}", clientAppPackage
    }
  }
}


tasks['assemble'].dependsOn(['compileGo'])


task('testGo', type: Exec, dependsOn: ['assemble']) {
  commandLine "go", "test", "github.com/giancosta86/moondeploy/v${majorVersion}/test"
}


tasks['check'].dependsOn(['testGo'])


task copyOsSpecificFiles {
  dependsOn(check)
  } << {
    if (onWindows) {
      def win32dllsDirForSetup = project.file("build/win32dlls")

      if (!win32dllsDirForSetup.isDirectory() || win32dllsDirForSetup.list().length == 0) {
        def msys2_64_Dir = new File("C:/msys64")

        if (!msys2_64_Dir.isDirectory()) {
          throw new GradleException("Cannot find the MSYS2 - 64bits directory ('${msys2_64_Dir}'). Please, refer to: https://msys2.github.io/ or change the build script")
        }

        println("Now copying DLLs from MSYS2 64...")

        copy {
          from new File(msys2_64_Dir, "mingw64/bin")
          into win32dllsDirForSetup

          include '*.dll'
          exclude {
            details -> !win32dlls.contains(details.file.name)
          }
        }
      }

      win32dlls.forEach{ dllFileName ->
        def dllFile = new File(win32dllsDirForSetup, dllFileName)

        if (!dllFile.isFile()) {
          throw new GradleException("Could not find DLL '${dllFileName}'. Please, delete the 'win32dlls' build dir and be sure to install all the libraries via MSYS2.")
        }
      }
    }

    copy {
      from project.file("setup/osFiles/${osSuffix}")
      into compileOutputDir
    }
}


task('createProgramZip', type: Zip, dependsOn: ['copyOsSpecificFiles'])  {
  from compileOutputDir

  archiveName "moondeploy-${version}-${osSuffix}.zip"
  destinationDir buildDir
}


task createOsSpecificPackages {
  dependsOn(copyOsSpecificFiles)
} << {
  if (onWindows) {
    exec {
      commandLine "iscc", "/Q", "/O\"${buildDir}\"", "${projectDir}/setup/windows/MoonDeploy.iss"
    }
  }
}
tasks['createOsSpecificPackages'].onlyIf { onWindows }


task('packageProgram').dependsOn(['createProgramZip', 'createOsSpecificPackages'])

tasks['build'].dependsOn(['packageProgram'])


task crossCompileForMac {
  dependsOn(installGoLibs, setNotices)
  } << {
    copy {
      from resourcesDir
      into crossCompileMacOutputDir
      include 'moondeploy.png'
      include 'moondeploy.ico'
    }

    exec {
      environment "GOOS": "darwin"

      commandLine "go", "build", "-o", "${crossCompileMacOutputDir}/moondeploy", clientAppPackage
    }
}


task('crossCreateProgramZipForMac', type: Zip, dependsOn: ['crossCompileForMac']) {
  from crossCompileMacOutputDir

  archiveName "moondeploy-${version}-${crossMacSuffix}.zip"

  destinationDir buildDir
}


task crossBuildForMac {
  dependsOn(crossCreateProgramZipForMac)
} << {}
